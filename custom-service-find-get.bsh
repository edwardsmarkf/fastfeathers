#! /bin/bash

##	custom-service-find-get.bsh  	last update: 2019-07-12

##  Bash-shell script to create a more advanced custom service example entirely from scratch.
##  the only code changed is in the ./src/services/SERVICENAME/SERVICENAME.class.js  file.

##  written from  https://docs.feathersjs.com/guides/basics/services.html

##  Note:  expect-tcl is used to run the feathers-cli steps.
##  Also, there is a bit of a debate if sudo is required for the feathers installation.  I
##  am using sudo to make the command global in nature.

##	!!! Be sure to run the feathers install gist first !!!

sudo yum  --assumeyes  install  expect  bind-utils ;   ## this might need to be in another module

SERVICE_NAME='customservice';
FEATHERS_PORT=3030;


echo -n  'node version:     '  ;  node     --version   ;       ##      8.16 at the time of this writing
if  [ $? -ne 0 ]; then
        echo 'Node has not yet been installed!';
        exit 1;
fi
echo -n  'npm version:      '  ;  npm      --version   ;       ##      6.9.0 at the time of this writing
if  [ $? -ne 0 ]; then
        echo 'NPM has not yet been installed!';
        exit 1;
fi
echo -n  'feathers version: '  ;  feathers --version   ;       ##      3.9 at the time of this writing
if  [ $? -ne 0 ]; then
        echo 'Feathers has not yet been installed!';
        exit 1;
fi

THIS_IPADDR=$(dig +short myip.opendns.com @resolver1.opendns.com. ;);


FileNameWithExtension=${0##*/}                       ;
FileNameWithoutExtension=${FileNameWithExtension%.*} ;
TimeStamp=$(date "+%Y-%m-%d %r")                     ;

commonPath="$(readlink -f $0 | xargs dirname)"/common;

rm -Rf	./${FileNameWithoutExtension}/ ;  ## just in case one already exists.
mkdir	./${FileNameWithoutExtension}/ &&   cd  ./${FileNameWithoutExtension}/   ;

.  ${commonPath}/createApp.bsh;



export SERVICE_NAME;
##		feathers generate service;   ## all defaults except for the service name - "testtable"
expect <(cat <<'END_OF_GENERATE_SERVICE'
	#	creates a service:	reverse  (all the defaults)
	#	written from:	https://docs.feathersjs.com/guides/chat/service.html
	
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	set SPACE	\x20;
	set RETURN	\x0d;
  
	set timeout -1
	 
	spawn	feathers generate service;
	 
	expect	-re ".*What kind of service is it\?.*"
	send	-- "${UPARROW}${UPARROW}${RETURN}"
			## defaults to NeDB
			## one downarrow selects "MongoDB"
			## 2 - Mongoose
			## 3 - Sequelize
			## 4 - KnexJS
			## 5 - RethinDB
			## 6 - custom service
	 
	expect	-re ".*What is the name of the service\?.*"
	send	-- "$env(SERVICE_NAME)${RETURN}"
	 
	expect	-re ".*Which path should the service be registered on\?.*"
	send	-- "${RETURN}"
			## defaults to /advanced
	 
	expect eof
END_OF_GENERATE_SERVICE
)	## end of feathers generate service


sed --in-place --file=- ./src/services/${SERVICE_NAME}/${SERVICE_NAME}.class.js  <<END_OF_SED_SERVICE_CLASS ;
2iconst os = require('os');                                              \\
const {promisify} = require('util');                                     \\
const fs = require('fs');                                                \\
const readFileAsync = promisify(fs.readdir);                             \\
const filePath = __dirname ;                                             \\
                                                                         \\
async function returnDirectory(path) {                                   \\
        return await readFileAsync(filePath, {encoding: 'utf8'})         \\
}                                                                        \\
function returnOs()     {                                                \\
        return os.platform() + ' ' +  os.type() + ' ' + os.release() ;   \\
}                                                                        \\

s/return \[\];/ \/\/ added by ${FileNameWithExtension}                   \\
        console.log('params: ' + JSON.stringify(params.query));          \\
        if  ( params.query.type === 'os' )      {                        \\
                return returnOs();                                       \\
        } else if ( params.query.type === 'dir' ){                       \\
                return returnDirectory();                                \\
        } else {                                                         \\
                return [];                                               \\
        }                                                                \\
        \/\/ end added by ${FileNameWithExtension}                       \\
        \/\/  return []; \/\/commented out by ${FileNameWithExtension}   \\
/;

s|      id, text: \`A new message with ID: \${id}\!\`|\
//    id, text: \`A new message with ID: \${id}\!\` -- line commented out by ${FileNameWithExtension}\n\
      id, text: \`ID reversed: \${id.split('').reverse().join('')}\` // -- line added by ${FileNameWithExtension}|;

END_OF_SED_SERVICE_CLASS


sed --in-place --file=- ./config/default.json  << END_OF_SED_CONFIG_DEFAULT ;
s/"host": "localhost",/"host": "${THIS_IPADDR}",/;
END_OF_SED_CONFIG_DEFAULT


cat <<END_OF_SCRIPT;
Only one line of code was changed in  ./src/services/${SERVICE_NAME}/${SERVICE_NAME}.class.js
Now run '  cd  ./${FileNameWithoutExtension}/ ; npm start; ' to try it out.

click on this to test FIND:    (note that both of these could just as easily be done using Postman)
    http://${THIS_IPADDR}:${FEATHERS_PORT}/${SERVICE_NAME}/?type=dir
    http://${THIS_IPADDR}:${FEATHERS_PORT}/${SERVICE_NAME}/?type=os

and click on this to test GET:  (notice there is no questionmark, so it will use 'get' instead of 'find'
    http://${THIS_IPADDR}:${FEATHERS_PORT}/${SERVICE_NAME}/%21%21skrow-siht-kniht-i
END_OF_SCRIPT
##
