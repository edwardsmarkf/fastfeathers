#! /bin/bash

##	sql-tiny.bsh  	last update: 2019-02-13

##  Bash-shell script to create a TINY sql example entirely from scratch.

##  https://www.geocerts.com/ssl-checker  - use this to check the cert


##  Note:  expect-tcl is used to run the feathers-cli steps.
##  Also, there is a bit of a debate if sudo is required for the feathers installation.  I
##  am using sudo to make the command global in nature.

##	Be sure to run init-feathers-setup.bsh first!

## note:  its always best to create the table yourself, rather than relying on sequelize to do it:
##   CREATE TABLE  tinyConnect 
##   (  name         VARCHAR(30)      NOT NULL
##   ,  address      VARCHAR(30)      NOT NULL
##   ,  createdAt    DATETIME         NOT NULL
##   ,  updatedAt    DATETIME         NOT NULL
##   ,  id           TINYINT(3) UNSIGNED NOT NULL AUTO_INCREMENT
##   ,  PRIMARY KEY (`id`)
##   );

MariaDB='MariaDB'          ;
CockroachDB='CockroachDB'  ;
TYPE=MariaDB           ;   ## SET THIS LINE FOR YOUR DATABASE CHOICE!



TableName='tinyConnect'   ;   ## name of sql table
ServiceName='tiny-connect';   ## service name (same one that feathers will probably convert to
                              ## if a CAPPED letter was used.

##   vars for ./config/default.json changes  --  you may need to double-check the values here.


##  database credentials
DB_USER='database-username'                                                                    ;
DB_PASS='database-password'                                                                    ;
DB_NAME='database-name'                                                                        ;
DB_SERVER_IP='XXX.XXX.XXX.XXX'                                                                 ;

FEATHERS_PORT='3030'                                                                           ;



##  check all versions

echo -n  'node version:     '  ;  node     --version   ;       ##      8.15 at the time of this writing
if  [ $? -ne 0 ]; then
        echo 'Node has not yet been installed!';
        exit 1;
fi
echo -n  'npm version:      '  ;  npm      --version   ;       ##      6.7 at the time of this writing
if  [ $? -ne 0 ]; then
        echo 'NPM has not yet been installed!';
        exit 1;
fi
echo -n  'feathers version: '  ;  feathers --version   ;       ##      3.9 at the time of this writing
if  [ $? -ne 0 ]; then
        echo 'Feathers has not yet been installed!';
        exit 1;
fi

sudo yum --assumeyes install  expect    ;
sudo yum  --assumeyes  install bind-utils ;    ## for the 'dig' command

THIS_IPADDR=$(dig +short myip.opendns.com @resolver1.opendns.com. ;);

	## see if this is going to be a SSL job or not
read -p "Enter SSL Domain Name (blank for ${THIS_IPADDR}: " DOMAIN_NAME;
if [ -z "${DOMAIN_NAME}" ]; then
    PROTOCOL='http';
else
    PROTOCOL='https'         ;
fi;


## prompt for any/all constant-variable changes

read -p "Enter DB_USER or blank to use '$DB_USER': " tmpDB_USER;
if  [ ! -z "$tmpDB_USER" ]; then
        DB_USER=$tmpDB_USER;
fi;

read -p "Enter DB_PASS or blank to use '$DB_PASS': " tmpDB_PASS;
if  [ ! -z "$tmpDB_PASS" ]; then
        DB_PASS=$tmpDB_PASS;
fi;


read -p "Enter DB_NAME or blank to use '$DB_NAME': " tmpDB_NAME;
if  [ ! -z "$tmpDB_NAME" ]; then
        DB_NAME=$tmpDB_NAME;
fi;


read -p "Enter DB_SERVER_IP or blank to use '$DB_SERVER_IP': " tmpDB_SERVER_IP;
if  [ ! -z "$tmpDB_SERVER_IP" ]; then
        DB_SERVER_IP=$tmpDB_SERVER_IP;
fi;


# build database string
if [ "${TYPE}" = "${MariaDB}" ]; then
    SERVER_PORT='3306'                                                                                               ;
    CONNECT_STRING="mysql://${DB_USER}:${DB_PASS}@${DB_SERVER_IP}:${SERVER_PORT}/${DB_NAME}"                         ;
    DB_URL="https://mariadb.com/"                                                                                    ;
elif [ "${TYPE}" = "${CockroachDB}" ]; then
    SERVER_PORT='26257'                                                                                              ;
    PG_SSL_FLAG='true'                                                                                               ;
    CONNECT_STRING="postgres://${DB_USER}:${DB_PASS}@${DB_SERVER_IP}:${SERVER_PORT}/${DB_NAME}?ssl=${PG_SSL_FLAG}"   ;
    DB_URL="https://cockroachlabs.com/"                                                                              ;
fi

  ## originally:        postgres": "postgres://postgres:@localhost:5432/google_jsgrid_pgsql
  ## password example:  postgres://feathersuser:aaaaaa@35.196.161.183:26257/bank
  ## mysql example:     mysql://feathersuser:aaaaaa@167.99.13.123:3306/bank


FileNameWithExtension=${0##*/}                       ;
FileNameWithoutExtension=${FileNameWithExtension%.*} ;
TimeStamp=$(date "+%Y-%m-%d %r")                     ;


if [ ! -z "${DOMAIN_NAME}" ]; then
			### https://certbot.eff.org/lets-encrypt/centosrhel7-other
	sudo yum --assumeyes install  yum-utils  ;
	sudo yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional;
	sudo yum --assumeyes install certbot;
fi

rm -Rf	./${FileNameWithoutExtension}/ ;  ## just in case one already exists.
mkdir	./${FileNameWithoutExtension}/ &&   cd  ./${FileNameWithoutExtension}/   ;

##     feathers generate  app;   ## taking all the defaults, except for the description
export FileNameWithExtension;
export TimeStamp;
expect <(cat <<'END_OF_GENERATE_APP'
	#	generates an application, taking ALL the defaults
	#	written from https://docs.feathersjs.com/guides/chat/creating.html
	 
	set timeout -1
	
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	set SPACE	\x20;
	set RETURN	\x0d;
	 
	spawn feathers generate app;
	 
	expect -re ".*Project name.*"
	send -- "${RETURN}"
			## defaults to the name of the directory
	 
	expect -re ".*Description.*"
	send -- "This app created with expect and $env(FileNameWithExtension) $env(TimeStamp)!${RETURN}"
			## optional description
	 
	expect -re ".*What folder should the source files live in\?.*\\\(src\\\).*"
	send -- "${RETURN}"
			## defaults to 'src'
	 
	expect -re ".*Which package manager are you using \\\(has to be installed globally\\\)\?.*"
	send -- "${RETURN}"
			## defaults to 'npm'
	 
	expect -re ".*What type of API are you making.*"
	send -- "${RETURN}"
			## defaults to REST & Realtime via Socket.io

	expect -re ".*Which testing framework do you prefer?.*"		
        send -- "${RETURN}"
	                ## defaults to Mocha + assert

	expect eof

END_OF_GENERATE_APP
)	## end of feathers generate app



if [ "${TYPE}" = "${MariaDB}" ]; then
    echo "Setting one uparrow for ${MariaDB}";
    export ARROW_DIRECTION=$'\x1b\x5b\x41'; ## up-arrow for MariadbDB
elif [ "${TYPE}" = "${CockroachDB}" ]; then
    echo "Setting one downarrow for ${CockroachDB}";
    export ARROW_DIRECTION=$'\x1b\x5b\x42'; ## down-arrow for CockroachDB
fi

export TableName;
export ServiceName;
export CONNECT_STRING;
##		feathers generate service;   ## all defaults except for the service name - "testtable"
expect <(cat <<'END_OF_GENERATE_SERVICE'
	#	creates a service:	testtable  (all the defaults)
	#	written from:	https://docs.feathersjs.com/guides/chat/service.html
	
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	set SPACE	\x20;
	set RETURN	\x0d;
	
	set timeout -1
	 
	spawn	feathers generate service;
	 
	expect	-re ".*What kind of service is it\?.*"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${RETURN}"
			## defaults to NeDB
			## one downarrow selects "MongoDB"
			## 2 - Mongoose
			## 3 - Sequelize
			## 4 - KnexJS
			## 5 - RethinDB
			## 6 - custom service
	 
	expect	-re ".*What is the name of the service\?.*"
	send	-- "$env(TableName)${RETURN}"
			## testtable
	 
	expect	-re ".*Which path should the service be registered on\?.*"
	send	-- "$env(ServiceName)${RETURN}"
			## defaults to something something like /tiny-connect
	 
	expect	-re ".*Which database are you connecting to\?.*"
	send    -- "$env(ARROW_DIRECTION)${RETURN}"
		## downarrow for postgres(cockroachdb), uparrow for mariadb
		
		expect	-re ".*What is the database connection string\?.*"
	send	-- "$env(CONNECT_STRING)${RETURN}"
		## default answer is nedb://../data

	expect eof
END_OF_GENERATE_SERVICE
)	## end of feathers generate service


if [ -z "${DOMAIN_NAME}" ]; then
	LOCALHOST_REPLACEMENT=${THIS_IPADDR}	;
else
	LOCALHOST_REPLACEMENT=${DOMAIN_NAME}	;
fi

sed  --in-place   --file=-   ./config/default.json   <<END_OF_DEFAULT_JSON ;
s?"host": "localhost",?"host": "${LOCALHOST_REPLACEMENT}",?;
s?"port": 3030,?"port": ${FEATHERS_PORT},?;
END_OF_DEFAULT_JSON

if [ ! -z "${DOMAIN_NAME}" ]; then
sed  --in-place   --file=-   ./config/default.json   <<END_OF_SSL_JSON ;
/"port": ${FEATHERS_PORT},/a\\
             /* added by ${FileNameWithExtension} ${TimeStamp}*/        \\
  "privkey_pem" : "/etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem",   \\
  "cert_pem"    : "/etc/letsencrypt/live/${DOMAIN_NAME}/cert.pem",      \\
  "chain_pem"   : "/etc/letsencrypt/live/${DOMAIN_NAME}/chain.pem",     \\
             /* added by ${FileNameWithExtension} ${TimeStamp}*/        \\
  
END_OF_SSL_JSON
fi


## modify the ./src/index.js file for SSL usage, if specified

if [ ! -z "${DOMAIN_NAME}" ]; then

## feathers by default uses http, not https, so this will modify feathers to only use https
##
sed  --in-place   --file=-  ./src/index.js      <<END_OF_INDEX_JS ;
s?const server = app.listen(port);?// &?;
s?'Feathers application started on http?&s?;
/const server = app.listen(port);/i\
                                                                                                                  \\
const https = require('https');                 /* added by ${FileNameWithExtension} ${TimeStamp}*/               \\
const fs = require('fs');                       /* added by ${FileNameWithExtension} ${TimeStamp}*/               \\
                                                                                                                  \\
    /* define these three ssl items in your ./config/default.json file  ${FileNameWithExtension} ${TimeStamp} */  \\
const privkey_pem = app.get('privkey_pem');     /* added by ${FileNameWithExtension} ${TimeStamp}*/               \\
const cert_pem = app.get('cert_pem');           /* added by ${FileNameWithExtension} ${TimeStamp}*/               \\
const chain_pem = app.get('chain_pem');         /* added by ${FileNameWithExtension} ${TimeStamp}*/               \\
                                                                                                                  \\
       // derived from:  https://docs.feathersjs.com/api/express.html#https                                       \\
const server = https.createServer({             /* added by ${FileNameWithExtension} ${TimeStamp}*/               \\
  key:  fs.readFileSync(privkey_pem),           /* added by ${FileNameWithExtension} ${TimeStamp}*/               \\
  cert: fs.readFileSync(cert_pem),              /* added by ${FileNameWithExtension} ${TimeStamp}*/               \\
  ca:   fs.readFileSync(chain_pem),             /* added by ${FileNameWithExtension} ${TimeStamp}*/               \\
}, app).listen(port);                           /* added by ${FileNameWithExtension} ${TimeStamp}*/               \\
                                                                                                                  \\
app.setup(server);    				/* added by ${FileNameWithExtension} ${TimeStamp}*/               \\

END_OF_INDEX_JS

fi	## skip this if we are not doing a SSL install


## we need to modify channels.js  **ONLY** because this lazy example skips using login authentication,
## otherwise the registered event listeners do not work!  notice we are not changing the channel names in the login 
## section, since login is not being used here.

##  see difference between   https://docs.feathersjs.com/guides/basics/real-time.html#channels
##  and                      https://docs.feathersjs.com/api/channels.html#example

sed  --in-place   --file=-  ./src/channels.js   <<END_OF_SED_CHANNELS_JS ;
s?app.channel('anonymous').join(connection);?app.channel('everybody').join(connection); /* changed from app.channel('anonymous').join(connection); by ${FileNameWithExtension} ${TimeStamp}*/?;
s?return app.channel('authenticated');?return app.channel('everybody');/* changed from return app.channel('authenticated'); by ${FileNameWithExtension} ${TimeStamp}*/?;
END_OF_SED_CHANNELS_JS




##  this does not work, unfortunately...  ;-(
##  document.write(\\"<    script src='//cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js'></script>\\");               <br />\\
##  document.write(\\"<    script src='//unpkg.com/@feathersjs/client\@\^3.0.0/dist/feathers.js'></script>\\");                    <br />\\

if [ -z "${DOMAIN_NAME}" ]; then
    THIS_DOMAIN=${THIS_IPADDR}	;
else
    THIS_DOMAIN=${DOMAIN_NAME}	;
fi

##  reduce the size of the feathers logo to make more room for code
sed --in-place  --file=- ./public/index.html   <<END_OF_SED_PUBLIC_HTML ;
s/class="logo"/& width='120' height='20'/;                         ## shrink the logo size
s/font-size: 2em;/font-size: 1em;/;                                ## reduce the H2 tag font size at the top
s/font-size: 1.0em;/font-size: 12px;/;                             ## reduce the "p" font size 
s/margin-top: 100px;/margin-top: 10px; margin-left: 10px/;         ## reduce the "main" tag from 100 pixels to 10 pixels
s/padding: 20px;/padding: 10px;/;                                  ## reduce the "main" tag from 20 pixels to 10 pixels
s/footer p {/p, td {/                                              ## replace the "footer p" selector with "p,td"
s/margin-bottom: 30px;/margin-bottom: 10px/;                       ## reduce the "img.logo" selector from 30 pixels to 10 pixels
/<footer>/d;                                                       ## remove the footer tag line
/<\/footer>/d;                 
/For more information on Feathers/d;                               ## remove the last line
/<\/style>/i\
table { border-collapse: collapse; margin-left : 20px ; } table, th, td { border: 1px solid black; } td { padding: 5px; } 

/<\/main>/i\
<hr />                                                                                                                                \\
<table border='0' cellpadding='5'>                                                                                                    \\
<tr>                                                                                                                                  \\
<th colspan='2'>                                                                                                                      \\
Go into your console, and try cut-paste entering the following commands at the command prompt:                                        \\
</th>                                                                                                                                 \\
</tr>                                                                                                                                 \\
<tr>                                                                                                                                  \\
<td colspan='2'>                                                                                                                      \\
&nbsp;&nbsp;&nbsp;&nbsp;/*  This command should be ran <strong>separately</strong> *\/                                          <br />\\
\[ '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js' , '//unpkg.com/@feathersjs/client@\^3.0.0/dist/feathers.js'  <br />\\
\].forEach( (src) => {                                                                                                          <br />\\
&nbsp;&nbsp;let script = document.createElement('script'); script.src = src; script.async = false;                              <br />\\
&nbsp;&nbsp;document.head.appendChild(script);                                                                                  <br />\\
});                                                                                                                             <br />\\
</td>                                                                                                                                 \\
</tr>                                                                                                                                 \\
<tr>                                                                                                                                  \\
<td>                                                                                                                                  \\
&nbsp; &nbsp; &nbsp; &nbsp; /* be sure to run the command ABOVE before attempting to run this one */                            <br />\\
const app      = feathers();                                                                                                    <br />\\
const socket   = io('${PROTOCOL}://${THIS_DOMAIN}:${FEATHERS_PORT}') ;   /* or just  const socket=io(); */                      <br />\\
app.configure(feathers.socketio(socket));                                                                                       <br />\\
<td>                                                                                                                                  \\
&nbsp;&nbsp;&nbsp;/* optionally, establish a listener for create(POST), patched(PATCH), update(PUT), and remove(DELETE) */      <br />\\
app.service('${ServiceName}').on('created', createMessage => { console.log('create(POST)   : ', JSON.stringify(createMessage))});<br />\\
app.service('${ServiceName}').on('updated', updateMessage => { console.log('update(PUT)    : ', JSON.stringify(updateMessage))});<br />\\
app.service('${ServiceName}').on('patched', patchMessage  => { console.log('patch(PATCH)   : ', JSON.stringify(patchMessage ))});<br />\\
app.service('${ServiceName}').on('removed', removeMessage => { console.log('removed(DELETE): ', JSON.stringify(removeMessage))});<br />\\                                                                                                                     <br />\\
</td>                                                                                                                                 \\
</tr>                                                                                                                                 \\
</table>                                                                                                                              \\
                                                                                                                                <br />\\
                                                                                                                                <br />\\
<table border='0' cellpadding='5'>                                                                                                    \\
<tr>                                                                                                                                  \\
<th colspan='2' align='center'>                                                                                                       \\
CRUD callable async functions &nbsp;&nbsp;<span style='font-size: 11px'>Note: update(PUT) is not referenced in this example</span>    \\
</th>                                                                                                                                 \\
</tr>                                                                                                                                 \\
<tr>                                                                                                                                  \\
<th>                                                                                                                                  \\
create(POST), patch(PATCH), and remove(DELETE)                                                                                       \\
</th>                                                                                                                                 \\
<th>                                                                                                                                  \\
Get/Find(GET)                                                                                                                        \\
</th>                                                                                                                                 \\
</tr>                                                                                                                                 \\
<tr>                                                                                                                                  \\
<td>                                                                                                                                  \\
async function createTiny(data) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* create(POST) */                                         <br />\\
&nbsp;&nbsp;let createResult = await app.service('${ServiceName}').create(data);                                                <br />\\
&nbsp;&nbsp;console.log('createTiny function result: ' + JSON.stringify(createResult) );                                        <br />\\
&nbsp;&nbsp;return createResult;                                                                                                <br />\\
};                                                                                                                              <br />\\
</td>                                                                                                                                 \\
<td>                                                                                                                                  \\
async function getTiny(id) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* get(GET) (just one by index)  */                             <br />\\
&nbsp;&nbsp;let getResult = await app.service('${ServiceName}').get(id);                                                        <br />\\
&nbsp;&nbsp;console.log('getTiny function: ' + JSON.stringify(getResult) );                                                     <br />\\
&nbsp;&nbsp;return getResult;                                                                                                   <br />\\
};                                                                                                                              <br />\\
</td>                                                                                                                                 \\
</tr>                                                                                                                                 \\
<tr>                                                                                                                                  \\
<td>                                                                                                                                  \\
async function patchTiny(id, data, params) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* patch(PATCH) */                              <br />\\
&nbsp;&nbsp;let patchResult = await app.service('${ServiceName}').patch(id, data, params);                                      <br />\\
&nbsp;&nbsp;console.log('patchTiny function: ' + JSON.stringify(patchResult) );                                                 <br />\\
&nbsp;&nbsp;return patchResult;                                                                                                 <br />\\
};                                                                                                                              <br />\\
</td>                                                                                                                                 \\
<td>                                                                                                                                  \\
async function findTiny(query) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* find(GET) (get all or by query) */                       <br />\\
&nbsp;&nbsp;console.log('Query function using: ' + JSON.stringify(query) );                                                     <br />\\
&nbsp;&nbsp;let findResult  = await app.service('${ServiceName}').find(query);                                                  <br />\\
&nbsp;&nbsp;console.log('findTiny function: ' + JSON.stringify(findResult) );                                                   <br />\\
&nbsp;&nbsp;return findResult;                                                                                                  <br />\\
};                                                                                                                              <br />\\
</td>                                                                                                                                 \\
</tr>                                                                                                                                 \\
<tr>                                                                                                                                  \\
<td colspan='2'>                                                                                                                      \\
async function removeTiny(id, params) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* remove(DELETE) */                                 <br />\\
&nbsp;&nbsp;let removeResult = await app.service('${ServiceName}').remove(id, params);                                          <br />\\
&nbsp;&nbsp;console.log('removeTiny function: ' + JSON.stringify(removeResult) );                                               <br />\\
&nbsp;&nbsp;return removeResult;                                                                                                <br />\\
};                                                                                                                              <br />\\
</td>                                                                                                                                 \\
</tr>                                                                                                                                 \\
</table>                                                                                                                              \\
<br /><br />                                                                                                                          \\
<table border='0' cellpadding='5'>                                                                                                    \\
<tr>                                                                                                                                  \\
<th colspan='2'>                                                                                                                      \\
Database Manipulation and Query Statements                                                                                            \\
</th>                                                                                                                                 \\
</tr>                                                                                                                                 \\
<tr>                                                                                                                                  \\
<th>                                                                                                                                  \\
Manipulation Statements                                                                                                               \\
</th>                                                                                                                                 \\
<th>                                                                                                                                  \\
Query Statements                                                                                                                      \\
</th>                                                                                                                                 \\
</tr>                                                                                                                                 \\
<tr>                                                                                                                                  \\
<td>                                                                                                                                  \\
let createTinyData = { name: 'mark edwards', address: '123 Swallow Lane' } ;                                                    <br />\\
createTiny(createTinyData).then((value) => {&nbsp;&nbsp;/* create(POST) */                                                      <br />\\
&nbsp;&nbsp;console.log('createTiny: ' + JSON.stringify(value));                                                                <br />\\
});                                                                                                                             <br />\\
</td>                                                                                                                                 \\
<td>                                                                                                                                  \\
let findTinyResultAll;                                                                                                          <br />\\
findTiny(null).then((value) => {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* find(GET) (find all)  */                                 <br />\\
&nbsp;&nbsp;findTinyResultAll = value;                                                                                          <br />\\
&nbsp;&nbsp;console.log('findTiny without query: ' + JSON.stringify(findTinyResultAll) );                                       <br />\\
});                                                                                                                             <br />\\
</td>                                                                                                                                 \\
</tr>                                                                                                                                 \\
<tr>                                                                                                                                  \\
<td>                                                                                                                                  \\
let patchResult = null;  let patchKey = 0;  let patchData =  {address:  '5678 There Street!' };                                 <br />\\
patchTiny(patchKey, patchData ).then( value  => {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* patch(PATCH) */                         <br />\\
&nbsp;&nbsp;patchResult = value;                                                                                                <br />\\
&nbsp;&nbsp;console.log('patchResult: ' + JSON.stringify(patchResult));                                                         <br />\\
});                                                                                                                             <br />\\
</td>                                                                                                                                 \\
<td>                                                                                                                                  \\
let findTinyResultOne; let findTinyData = {query:{ id: 1}};                                                                     <br />\\
findTiny(findTinyData).then((value) => {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* find(GET) (with data) */                         <br />\\
&nbsp;&nbsp;findTinyResultOne = value;                                                                                          <br />\\
&nbsp;&nbsp;console.log('findTiny with ' + findTinyData + ' query: ' + JSON.stringify(findTinyResultOne) );                     <br />\\
});                                                                                                                             <br />\\
</td>                                                                                                                                 \\
</tr>                                                                                                                                 \\
<tr>                                                                                                                                  \\
<td>                                                                                                                                  \\
let removeResult = null;  let removeKey = 0;                                                                                    <br />\\
removeTiny(removeKey).then( value  => {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* remove(DELETE) */                                 <br />\\
&nbsp;&nbsp;removeResult = value;                                                                                               <br />\\
&nbsp;&nbsp;console.log('removeResult(' + removeKey + ': ' + JSON.stringify(removeResult));                                     <br />\\
});                                                                                                                             <br />\\
</td>                                                                                                                                 \\
<td>                                                                                                                                  \\
let getTinyResult = null; let getKey = 0;                                                                                       <br />\\
getTiny(getKey).then( value => {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* get(GET)  */                                             <br />\\
&nbsp;&nbsp;getTinyResult = value;                                                                                              <br />\\
&nbsp;&nbsp;console.log('getTiny('  +  getKey  + ') : '  +  JSON.stringify(getTinyResult) );                                    <br />\\
});                                                                                                                             <br />\\
</td>                                                                                                                                 \\
</tr>                                                                                                                                 \\
</table>                                                                                                                              \\
</div>                                                                                                                          <br />\\

END_OF_SED_PUBLIC_HTML


sed --in-place --file=- ./src/models/${ServiceName}.model.js  <<END_OF_SED_MODEL ;
/text: {/ {
    N; /type: DataTypes.STRING,/ {
        N; /allowNull: false/ {
            N; /}/ {
                s/text: {//; s/type: DataTypes.STRING,//; s/allowNull: false//; s/}//;a \
\\
    \/* new items added by ${FileNameWithExtension} ${TimeStamp} *\/  \\
    name     : { type: DataTypes.STRING, allowNull: false  }, \\
    address  : { type: DataTypes.STRING, allowNull: true   }, \\
    \/* end of new items added by ${FileNameWithExtension} ${TimeStamp} *\/ \\

            }
        }
    }
}
/  }, {/a \
\\
\\
    \/* added tableName by ${FileNameWithExtension} ${TimeStamp} *\/  \\
          tableName       :       '${TableName}'   ,                  \\
    \/* end of new items added by ${FileNameWithExtension} ${TimeStamp} *\/\\
\\

END_OF_SED_MODEL



## modify the sequelize.js to logging, and add a ssl-dialect true-false flag option
##	note that mariadb(mysql) does not require a dialect change, and will be ignored for mariadb
sed --in-place --file=- ./src/sequelize.js   <<END_OF_SED_SEQUELIZE ;
s?logging: false,?/*logging: false,*/  /* uncomment out 'logging:false in production -- added by ${FileNameWithExtension}  ${TimeStamp} */?;
s?dialect: 'postgres',?dialect: 'postgres', dialectOptions: { ssl: ${PG_SSL_FLAG} }, /* added dialectOptions:{} ${FileNameWithExtension}  ${TimeStamp} */?;
END_OF_SED_SEQUELIZE


if [ -z "${DOMAIN_NAME}" ]; then
	URL_LINK=${PROTOCOL}://${THIS_IPADDR}:${FEATHERS_PORT}	;
	SSL_NOTE=''		;
else
	URL_LINK=${PROTOCOL}://${DOMAIN_NAME}:${FEATHERS_PORT}	;
	SSL_NOTE="Please don't forget to generate your SSL by entering:  sudo certbot  certonly ;  for domain: ${DOMAIN_NAME} "  ;
fi

cat <<END_OF_SCRIPT;

Feathers google app should now be built.  Please confirm your ./config/default.json values.

Connect string in your ./config/default.json values file:  
    $CONNECT_STRING
Now run '  cd  ./${FileNameWithoutExtension}/ ; npm start; ' to try it out.
${SSL_NOTE}

then open ${URL_LINK} in your browser.

END_OF_SCRIPT
##
