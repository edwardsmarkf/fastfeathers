#! /bin/bash

##	gmail-sequelize.bsh  	last update: 2018-02-13
##
##	Bash script to create a google-gmail authentication with a service,
##      using a sequelize database.
##
##	Be sure to run the feathers install gist first!

##  a special shout-out THANK you to feathers slackware Freeline for providing me the code to retrieve the login information.


##      ./config/default.json changes  --  YOU WILL NEED TO CHANGE THESE!
HOST='fastfeathers.website'                                                                     ;
GOOGLE_CLIENT_ID='119068144580-gpeiXXXXXXXXXXXXXXXXXXXXXXXXXXgs.apps.googleusercontent.com'     ;
GOOGLE_CLIENT_SECRET='m-RXXXXXXXXXXXXXpJIajwpN'                                                 ;
###  get credentials here:  https://console.developers.google.com/apis/credentials/

##  database credentials
DB_USER='database-username'                                                                    ;
DB_PASS='database-password'                                                                    ;
DB_NAME='database-name'                                                                        ;
DB_SERVER_IP='XXX.XXX.XXX.XXX'                                                                    ;


MariaDB='MariaDB'          ;
CockroachDB='CockroachDB'  ;
TYPE=MariaDB           ;   ## SET THIS LINE FOR YOUR DATABASE CHOICE!

TableName='oauth2Logins'     ;   ## name of sql table
ServiceName='oauth-2-logins' ;   ## service name (same one that feathers will probably convert to
                               ## if a CAPPED letter was used.)



echo -n  'node version:     '  ;  node     --version   ;       ##      8.15 at the time of this writing
if  [ $? -ne 0 ]; then
        echo 'Node has not yet been installed!';
        exit 1;
fi
echo -n  'npm version:      '  ;  npm      --version   ;       ##      6.7.0 at the time of this writing
if  [ $? -ne 0 ]; then
        echo 'NPM has not yet been installed!';
        exit 1;
fi
echo -n  'feathers version: '  ;  feathers --version   ;       ##      3.9.0 at the time of this writing
if  [ $? -ne 0 ]; then
        echo 'Feathers has not yet been installed!';
        exit 1;
fi

echo 'get your authentication information from https://console.developers.google.com/apis/credentials/oauthclient/';

## prompt for any/all constant-variable changes

read -p "Enter HOST or blank to use '$HOST': " tmpHost;
if  [ ! -z "$tmpHost" ]; then
        HOST=$tmpHost;
fi;

read -p "Enter GOOGLE_CLIENT_ID or blank to use '$GOOGLE_CLIENT_ID': " tmpGOOGLE_CLIENT_ID;
if  [ ! -z "$tmpGOOGLE_CLIENT_ID" ]; then
        GOOGLE_CLIENT_ID=$tmpGOOGLE_CLIENT_ID;
fi;

read -p "Enter GOOGLE_CLIENT_SECRET or blank to use '$GOOGLE_CLIENT_SECRET': " tmpGOOGLE_CLIENT_SECRET;
if  [ ! -z "$tmpGOOGLE_CLIENT_SECRET" ]; then
        GOOGLE_CLIENT_SECRET=$tmpGOOGLE_CLIENT_SECRET;
fi;


# build database string
if [ "${TYPE}" = "${MariaDB}" ]; then
    SERVER_PORT='3306'                                                                                               ;
    CONNECT_STRING="mysql://${DB_USER}:${DB_PASS}@${DB_SERVER_IP}:${SERVER_PORT}/${DB_NAME}"                         ;
    DB_URL="https://mariadb.com/"                                                                                    ;
elif [ "${TYPE}" = "${CockroachDB}" ]; then
    SERVER_PORT='26257'                                                                                              ;
    PG_SSL_FLAG='true'                                                                                               ;
    CONNECT_STRING="postgres://${DB_USER}:${DB_PASS}@${DB_SERVER_IP}:${SERVER_PORT}/${DB_NAME}?ssl=${PG_SSL_FLAG}"   ;
    DB_URL="https://cockroachlabs.com/"                                                                              ;
fi


THIS_IPADDR=$(dig +short myip.opendns.com @resolver1.opendns.com. ;);

export HOST;
DOMAIN_IP=$(dig ${HOST} | grep "$(printf '\t')IN$(printf '\t')A$(printf '\t')" | grep -oE '((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])');


FileNameWithExtension=${0##*/}                       ;
FileNameWithoutExtension=${FileNameWithExtension%.*} ;
TimeStamp=$(date "+%Y-%m-%d %r")                     ;


rm -Rf	./${FileNameWithoutExtension} ;  ## just in case one already exists.
mkdir	./${FileNameWithoutExtension} && cd	./${FileNameWithoutExtension} ;

npm install path;  ## needed for two of the hooks.

##     feathers generate  app;   ## taking all the defaults, except for the description
export FileNameWithExtension;
export TimeStamp;
expect <(cat <<'END_OF_GENERATE_APP'
	#	generates an application, taking ALL the defaults
	#	written from https://docs.feathersjs.com/guides/chat/creating.html
	 
	set timeout -1
	
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
        set SPACE       \x20;
	set RETURN      \x0d;
	 
	spawn feathers generate app;
	 
	expect -re ".*Project name.*"
	send -- "${RETURN}"
			## defaults to the name of the directory
	 
	expect -re ".*Description.*"
	send -- "This app created with expect and $env(FileNameWithExtension) $env(TimeStamp)!${RETURN}"
			## optional description
	 
	expect -re ".*What folder should the source files live in\?.*\\\(src\\\).*"
	send -- "${RETURN}"
			## defaults to 'src'
	 
	expect -re ".*Which package manager are you using \\\(has to be installed globally\\\)\?.*"
	send -- "${RETURN}"
			## defaults to 'npm'
	 
	expect -re ".*What type of API are you making.*"
	send -- "${RETURN}"
			## defaults to REST & Realtime via Socket.io
	expect -re ".*Which testing framework do you prefer?.*"		
        send -- "${RETURN}"
	                ## defaults to Mocha + assert
	expect eof
END_OF_GENERATE_APP
)	## end of feathers generate app



if [ "${TYPE}" = "${MariaDB}" ]; then
    echo "Setting one uparrow for ${MariaDB}";
    export ARROW_DIRECTION=$'\x1b\x5b\x41'; ## up-arrow for MariadbDB
elif [ "${TYPE}" = "${CockroachDB}" ]; then
    echo "Setting one downarrow for ${CockroachDB}";
    export ARROW_DIRECTION=$'\x1b\x5b\x42'; ## down-arrow for CockroachDB
fi

export TableName;
export ServiceName;

export CONNECT_STRING;
##	feathers generate authentication;  ## all defaults
expect <(cat <<'END_OF_GENERATE_AUTH'
	#	generates an authentication for Google
	#	written from	https://docs.feathersjs.com/guides/chat/authentication.html
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
        set SPACE       \x20;
	set RETURN      \x0d;
		
	spawn	feathers generate authentication ;
	 
	expect	-re ".*What authentication providers do you want to use\?.*"
	##send	-- "${RETURN}"		
	send	-- "${SPACE}${DOWNARROW}${DOWNARROW}${SPACE}${RETURN}"
		## return defaults to Local Storage
		## first space to de-select local, DOWNARROW two times, final space to select Google, and return
	 
	expect	-re ".*What is the name of the user \\\(entity\\\) service.*"
	send	-- "$env(TableName)${RETURN}"
		## default answer is 'users'
	 
	expect	-re ".*What kind of service is it\?.*"
	send    -- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${RETURN}"
                        ## defaults to NeDB
                        ## one downarrow selects "MongoDB"
                        ## 2 - Mongoose
                        ## 3 - Sequelize
                        ## 4 - KnexJS
                        ## 5 - RethinDB
                        ## 6 - custom service
                        
	expect	-re ".*Which database are you connecting to\?.*"
        send    -- "$env(ARROW_DIRECTION)${RETURN}"
		## downarrow for postgres(cockroachdb), uparrow for mariadb

        expect  -re ".*What is the database connection string\?.*"
        send    -- "$env(CONNECT_STRING)${RETURN}"
                ## default answer is nedb://../data
	 
	expect eof
END_OF_GENERATE_AUTH
)	## end of feathers generate authentication




##	feathers generate hook;  
expect <(cat <<'END_OF_GENERATE_SERVICE_BEFORE_CREATE_HOOK'
	#	generates a "BEFORE--CREATE/UPDATE" hook named "testtable-hook" for the "testtable" service for Google
	#	written from	https://docs.feathersjs.com/api/authentication/oauth2.html#customizing-the-oauth-response
	 
	set timeout -1

	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
        set SPACE       \x20;
	set RETURN      \x0d;

	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook\?.*"
	send	-- "oauth2-login-before-create${RETURN}"
	expect	-re "What kind of hook should it be\?"
	send	--  "${DOWNARROW}${RETURN}"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)\?"
	send	-- "${DOWNARROW}${SPACE}${RETURN}"
			## downarrow space return selects 'oauth2-login'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)\?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${SPACE}${RETURN}"	
		## downarrow (3) space downarrow space selects 'create'
	 
	expect eof
END_OF_GENERATE_SERVICE_BEFORE_CREATE_HOOK
)	## end of feathers generate hook 'testtable-hook'




##	feathers generate hook;  
expect <(cat <<'END_OF_GENERATE_SERVICE_BEFORE_UPDATE_PATCH_HOOK'
	#	generates a "BEFORE--CREATE/UPDATE" hook named "testtable-hook" for the "testtable" service for Google
	#	written from	https://docs.feathersjs.com/api/authentication/oauth2.html#customizing-the-oauth-response
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
        set SPACE       \x20;
	set RETURN      \x0d;


	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook\?.*"
	send	-- "oauth2-login-before-update-patch${RETURN}"

	expect	-re "What kind of hook should it be\?"
	send	--  "${DOWNARROW}${RETURN}"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)\?"
	send	-- "${DOWNARROW}${SPACE}${RETURN}"
			## downarrow space return selects 'oauth2-login'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)\?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${SPACE}${DOWNARROW}${SPACE}${RETURN}"	
		## downarrow (4) space downarrow space selects 'create'
	 
	expect eof
END_OF_GENERATE_SERVICE_BEFORE_UPDATE_PATCH_HOOK
)	## end of feathers generate hook 'testtable-hook'




## edit the oauth2-login-before-create.js to extract the custom login stuff, like username, first-name, etc

sed --in-place --file=- ./src/hooks/oauth2-login-before-create.js   <<END_OF_SED_OAUTH2_BEFORE_CREATE_HOOK ;
3i\
 \\
 \\
    \/*  code added by ${FileNameWithExtension} ${TimeStamp} *\/ \\
const path = require('path');\\
const logger = require('winston');\\
const _ = require('lodash');\\
    \/* end of code added by ${FileNameWithExtension} ${TimeStamp} *\/ \\

/^  return async context => {$/a\
  \/*  code added by ${FileNameWithExtension} ${TimeStamp} *\/ \\
  context.data.scriptDirName = path.dirname(__filename);\\
  context.data.scriptBaseName = path.basename(__filename);\\
  if  (  _.has(context, 'data.google.profile')  ){\\
    if  ( _.has(context.data.google.profile, 'displayName' ) )    {\\
      context.data.displayName = context.data.google.profile.displayName;\\
      logger.info('displayName: ' + context.data.displayName);  \\
    }\\
    if  ( _.has(context.data.google.profile, 'emails' ) ) {\\
      context.data.email = context.data.google.profile.emails.find(email => email.value).value;\\
      logger.info('email:       ' + context.data.email);\\
    }\\
    if  ( _.has(context.data.google.profile, 'photos' ) ) {\\
      context.data.photos = context.data.google.profile.photos.find(photos => photos.value).value;\\
      logger.info('photos:       ' + context.data.photos);\\
    }\\
    if  ( _.has(context.data.google.profile, 'name' ) ) {\\
      ['familyName', 'givenName'].forEach( (val) => {\\
        if  ( _.has(context.data.google.profile.name, val )     ) {\\
          context.data[val] = context.data.google.profile.name[val];\\
          logger.info(val + ': ' + context.data[val]);\\
        }\\
      })\\
    }\\
  } // end if has data.google.profile\\
  \/*  end of code added by ${FileNameWithExtension} ${TimeStamp} *\/\\
  
END_OF_SED_OAUTH2_BEFORE_CREATE_HOOK






sed --in-place --file=- ./src/hooks/oauth2-login-before-update-patch.js   <<END_OF_SED_OAUTH2_BEFORE_UPDATE_PATCH_HOOK ;
3i\
 \\
 \\
    \/*  code added by ${FileNameWithExtension} ${TimeStamp} *\/ \\
const path = require('path');\\
const logger = require('winston');\\
const _ = require('lodash');\\
    \/* end of code added by ${FileNameWithExtension} ${TimeStamp} *\/ \\

/^  return async context => {$/a\
  \/*  code added by ${FileNameWithExtension} ${TimeStamp} *\/ \\
  context.data.scriptDirName = path.dirname(__filename);\\
  context.data.scriptBaseName = path.basename(__filename);\\
  \/*  end of code added by ${FileNameWithExtension} ${TimeStamp} *\/\\

END_OF_SED_OAUTH2_BEFORE_UPDATE_PATCH_HOOK



## 2019-02-18 - changed email to "unique: true" and added password field (not sure if/why the second is required??)
sed --in-place --file=- ./src/models/${ServiceName}.model.js   <<END_OF_SED_OAUTH2_LOGIN_MODEL ;
/    googleId: { type: Sequelize.STRING },/ a\
\\
\\
    \/* data items added by ${FileNameWithExtension} ${TimeStamp} *\/\\
    email: { type: DataTypes.STRING , allowNull:  false, unique: true }, \\
    password: {  type: DataTypes.STRING,  allowNull: false },  \\
    displayName: { type: DataTypes.STRING },\\
    familyName: { type: DataTypes.STRING },\\
    givenName: { type: DataTypes.STRING },\\
    photos: { type: DataTypes.STRING },\\
    scriptDirName: { type: DataTypes.STRING },\\
    scriptBaseName: { type: DataTypes.STRING },\\
    \/* end of data items added by ${FileNameWithExtension} ${TimeStamp} *\/\\

/  }, {/a \
\\
\\
    \/* added tableName by ${FileNameWithExtension} ${TimeStamp} *\/  \\
          tableName       :       '${TableName}'   ,                  \\
	  freezeTableName :       true             ,                  \\
    \/* end of new items added by ${FileNameWithExtension} ${TimeStamp} *\/\\
\\
END_OF_SED_OAUTH2_LOGIN_MODEL



## modify the default.json file if you are using google (you will have to change these values!
## values came from   https://console.developers.google.com/apis/api under credidentials
sed --in-place --file=- ./config/default.json  << END_OF_SED_DEFAULT_JSON ;
s/"host": "localhost",/"host": "${HOST}",/;
s/your google client id/${GOOGLE_CLIENT_ID}/;                                           
s/your google client secret/${GOOGLE_CLIENT_SECRET}/;
END_OF_SED_DEFAULT_JSON

echo " dont forget to change the IP ## in both the ./config/default.json  *AND*  the google-applications page (make sure they match)";


sed --in-place --file=- ./public/index.html << END_OF_INDEX_HTML ;
/<h2 class="center-text">A REST and realtime API layer for modern applications.<\/h2>/ a\
<p class="center-text"><br\/>\\
  <a href="/auth/google">Login With Google<\/a>\\
   &nbsp;\\
  <a href="javascript: feathersClient.logout(); Cookies.remove('feathers-jwt'); window.location.reload(true);">Log Out Of Google<\/a>\\
  <br /><br />\\
  Run the following commands in the console:\\
<\/p>\\
\\
<script type="text/javascript" src="//unpkg.com/@feathersjs/client@^3.0.0/dist/feathers.js"></script>\\
<script type="text/javascript"  src="//unpkg.com/socket.io-client@1.7.3/dist/socket.io.js"></script>\\
<!-- added for google logout -->\\
<script type="text/javascript"  src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>\\
<script type="text/javascript"  src="//cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"></script>\\
<!-- end of added for google logout -->\\
<script>\\
  // Socket.io is exposed as the \`io\` global.\\
  var socket = io(':3030', {transports: ['websocket']});\\
  // feathers-client is exposed as the \`feathers\` global.\\
  var feathersClient = feathers()\\
	    //.configure(feathers.hooks()) commented out with 3.0\\
    .configure(feathers.socketio(socket))\\
    .configure(feathers.authentication({\\
      cookie: 'feathers-jwt'\\
    }));\\
\\
var setUserInfo = (async () => {\\
            // a special thanks to feathers-slack "freeline" for providing this code \\
        var response = await feathersClient.authenticate();\\
        var payload = await feathersClient.passport.verifyJWT(response.accessToken);\\
        var user = await feathersClient.service('${ServiceName}').get(payload.userId);\\
        feathersClient.set('user', user);  // feathersClient.get('user').email to get email address \\
        console.log('you logged in as: ' + feathersClient.get('user').email); // display what is now in user in the console.\\
  })\\
\\
  feathersClient.authenticate()\\
    .then(response => {\\
      console.info('Feathers Client has Authenticated with the JWT access token!');\\
      console.log(response);\\
      setUserInfo();\\
    })\\
    .catch(error => {\\
      console.info("We have not logged in with OAuth, yet.  This means there's no cookie storing the accessToken.  As a result, feathersClient.authenticate() failed.");\\
      console.log(error);\\
    });\\
</script>\\
END_OF_INDEX_HTML

dig ${HOST} | grep  'A';
cat <<END_OF_SCRIPT;
Host: ${HOST} points to ${DOMAIN_IP}
Does ${HOST} resolve to ${THIS_IPADDR} ?
Feathers google app should now be built.  Please confirm your ./config/default.json values.
Client id in your ./config/default.json values file: ${GOOGLE_CLIENT_ID} 
Client secret in your ./config/default.json values file:  ${CLIENT_SECRET_ID}
Now run ' cd ./${FileNameWithoutExtension}/  ; npm start;  ' to try it out.
END_OF_SCRIPT
#
