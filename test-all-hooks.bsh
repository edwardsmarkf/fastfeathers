#! /bin/bash

## test-all-hooks.bsh     2018-03-30

## this "extraordinarly redundant" script creates a logger.info(__filename) for each and every hook, including the error hooks

## also creates all the application-wide hooks, for a total of FOURTH-TWO (42) hooks.


export SERVICE_NAME='testservice';
FEATHERS_PORT=3030;

THIS_IPADDR=$(dig +short myip.opendns.com @resolver1.opendns.com. ;);


FileNameWithExtension=${0##*/}                       ;
FileNameWithoutExtension=${FileNameWithExtension%.*} ;
TimeStamp=`date "+%Y-%m-%d %r"`                      ;


rm -Rf	./${FileNameWithoutExtension}/ ;  ## just in case one already exists.
mkdir	./${FileNameWithoutExtension}/ &&   cd  ./${FileNameWithoutExtension}/   ;

##     feathers generate  app;   ## taking all the defaults, except for the description
export FileNameWithExtension;
export TimeStamp;
expect <(cat <<'END_OF_GENERATE_APP'
	#	generates an application, taking ALL the defaults
	#	written from https://docs.feathersjs.com/guides/chat/creating.html
	 
	set timeout -1
	 
	spawn feathers generate app;
	 
	expect -re ".*Project name.*"
	send -- "\r"
			## defaults to the name of the directory
	 
	expect -re ".*Description.*"
	send -- "This app created with expect and $env(FileNameWithExtension) $env(TimeStamp)!\r"
			## optional description
	 
	expect -re ".*What folder should the source files live in\?.*\\\(src\\\).*"
	send -- "\r"
			## defaults to 'src'
	 
	expect -re ".*Which package manager are you using \\\(has to be installed globally\\\)\?.*"
	send -- "\r"
			## defaults to 'npm'
	 
	expect -re ".*What type of API are you making\?.*"
	send -- "\r"
			## defaults to REST & Realtime via Socket.io
	expect eof
END_OF_GENERATE_APP
)	## end of feathers generate app


export SERVICE_NAME;
##		feathers generate service;   ## all defaults except for the service name - "testtable"
expect <(cat <<'END_OF_GENERATE_SERVICE'
	#	creates a service:	reverse  (all the defaults)
	#	written from:	https://docs.feathersjs.com/guides/chat/service.html
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
  
	set timeout -1
	 
	spawn	feathers generate service;
	 
	expect	-re ".*What kind of service is it\?.*"
	send	-- "\r"
			## defaults to NeDB
			
	 
	expect	-re ".*What is the name of the service\?.*"
	send	-- "$env(SERVICE_NAME)\r"
	 
	expect	-re ".*Which path should the service be registered on\?.*"
	send	-- "\r"
			## defaults to /reverse
			
	expect	-re ".*What is the database connection string.*"
	send	-- "\r"
			##  default
	 
	expect eof
END_OF_GENERATE_SERVICE
)	## end of feathers generate service


#sed --in-place --file=- ./src/services/${SERVICE_NAME}/${SERVICE_NAME}.class.js  <<END_OF_SED_REVERSE_CLASS ;
#s|id, text: \`A new message with ID: \${id}\!\`|id, text: \`ID reversed: \${id.toUpperCase()}\` // ${FileNameWithExtension}|;
#END_OF_SED_REVERSE_CLASS

sed --in-place --file=- ./src/services/${SERVICE_NAME}/${SERVICE_NAME}.class.js  <<END_OF_SED_REVERSE_CLASS ;
s|      id, text: \`A new message with ID: \${id}\!\`|\
//    id, text: \`A new message with ID: \${id}\!\` -- line commented out by ${FileNameWithExtension}\n\
      id, text: \`ID reversed: \${id.split('').reverse().join('')}\` // -- line added by ${FileNameWithExtension}|;
END_OF_SED_REVERSE_CLASS


sed --in-place --file=- ./config/default.json  << END_OF_SED_CONFIG_DEFAULT ;
s/"host": "localhost",/"host": "${THIS_IPADDR}",/;
END_OF_SED_CONFIG_DEFAULT




# before
# after
# error

# default returns application-wide
# downarrow space return selects testservice

# all
# find
# get
# create
# update
# patch
# remove







expect <(cat <<'END_OF_GEN_BEFORE_ALL_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-before-all\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects 'testservice'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"	
		##  space selects 'all'
	 
	expect eof
END_OF_GEN_BEFORE_ALL_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-before-all.js   <<END_OF_SED_BEFORE_ALL_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_BEFORE_ALL_HOOK


expect <(cat <<'END_OF_GEN_AFTER_ALL_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-after-all\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow twice return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"	
		##  space selects 'all'
	 
	expect eof
END_OF_GEN_AFTER_ALL_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-after-all.js   <<END_OF_SED_AFTER_ALL_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_AFTER_ALL_HOOK


expect <(cat <<'END_OF_GEN_ERROR_ALL_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-error-all\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow twice return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"	
		##  space selects 'all'
	 
	expect eof
END_OF_GEN_ERROR_ALL_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-error-all.js   <<END_OF_SED_ERROR_ALL_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_ERROR_ALL_HOOK








expect <(cat <<'END_OF_GEN_BEFORE_FIND_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-before-find\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"	
		## downarrow (1 times) space selects 'find'
	 
	expect eof
END_OF_GEN_BEFORE_FIND_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-before-find.js   <<END_OF_SED_BEFORE_FIND_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_BEFORE_FIND_HOOK

expect <(cat <<'END_OF_GEN_AFTER_FIND_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-after-find\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"	
		## downarrow (1 times) space selects 'find'
	 
	expect eof
END_OF_GEN_AFTER_FIND_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-after-find.js   <<END_OF_SED_AFTER_FIND_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_AFTER_FIND_HOOK


expect <(cat <<'END_OF_GEN_ERROR_FIND_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-error-find\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (3) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"	
		## downarrow (1 times) space selects 'find'
	 
	expect eof
END_OF_GEN_ERROR_FIND_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-error-find.js   <<END_OF_SED_ERROR_FIND_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_ERROR_FIND_HOOK








expect <(cat <<'END_OF_GEN_BEFORE_GET_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-before-get\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (2 times) space selects 'get'
	 
	expect eof
END_OF_GEN_BEFORE_GET_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-before-get.js   <<END_OF_SED_BEFORE_GET_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_BEFORE_GET_HOOK

expect <(cat <<'END_OF_GEN_AFTER_GET_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-after-get\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects 
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (2 times) space selects 'get'
	 
	expect eof
END_OF_GEN_AFTER_GET_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-after-get.js   <<END_OF_SED_AFTER_GET_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_AFTER_GET_HOOK


expect <(cat <<'END_OF_GEN_ERROR_GET_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-error-get\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (3) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (2 times) space selects 'get'
	 
	expect eof
END_OF_GEN_ERROR_GET_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-error-get.js   <<END_OF_SED_ERROR_GET_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_ERROR_GET_HOOK







expect <(cat <<'END_OF_GEN_BEFORE_CREATE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-before-create\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (3 times) space selects 'create'
	 
	expect eof
END_OF_GEN_BEFORE_CREATE_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-before-create.js   <<END_OF_SED_BEFORE_CREATE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_BEFORE_CREATE_HOOK

expect <(cat <<'END_OF_GEN_AFTER_CREATE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-after-create\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (3 times) space selects 'create'
	 
	expect eof
END_OF_GEN_AFTER_CREATE_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-after-create.js   <<END_OF_SED_AFTER_CREATE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_AFTER_CREATE_HOOK

expect <(cat <<'END_OF_GEN_ERROR_CREATE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-error-create\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (3 times) space selects 'create'
	 
	expect eof
END_OF_GEN_ERROR_CREATE_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-error-create.js   <<END_OF_SED_ERROR_CREATE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_ERROR_CREATE_HOOK









expect <(cat <<'END_OF_GEN_BEFORE_UPDATE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-before-update\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (4 times) space selects 'update'
	 
	expect eof
END_OF_GEN_BEFORE_UPDATE_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-before-update.js   <<END_OF_SED_BEFORE_UPDATE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_BEFORE_UPDATE_HOOK

expect <(cat <<'END_OF_GEN_AFTER_UPDATE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-after-update\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (3 times) space selects 'update'
	 
	expect eof
END_OF_GEN_AFTER_UPDATE_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-after-update.js   <<END_OF_SED_AFTER_UPDATE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_AFTER_UPDATE_HOOK


expect <(cat <<'END_OF_GEN_ERROR_UPDATE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-error-update\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (3) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (3 times) space selects 'update'
	 
	expect eof
END_OF_GEN_ERROR_UPDATE_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-error-update.js   <<END_OF_SED_ERROR_UPDATE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_ERROR_UPDATE_HOOK






expect <(cat <<'END_OF_GEN_BEFORE_PATCH_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-before-patch\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (5 times) space selects 'patch'
	 
	expect eof
END_OF_GEN_BEFORE_PATCH_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-before-patch.js   <<END_OF_SED_BEFORE_PATCH_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_BEFORE_PATCH_HOOK

expect <(cat <<'END_OF_GEN_AFTER_PATCH_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-after-patch\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (5 times) space selects 'patch'
	 
	expect eof
END_OF_GEN_AFTER_PATCH_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-after-patch.js   <<END_OF_SED_AFTER_PATCH_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_AFTER_PATCH_HOOK



expect <(cat <<'END_OF_GEN_ERROR_PATCH_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-error-patch\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (5 times) space selects 'patch'
	 
	expect eof
END_OF_GEN_ERROR_PATCH_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-error-patch.js   <<END_OF_SED_ERROR_PATCH_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_ERROR_PATCH_HOOK








expect <(cat <<'END_OF_GEN_BEFORE_REMOVE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-before-remove\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (6 times) space selects 'remove'
	 
	expect eof
END_OF_GEN_BEFORE_REMOVE_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-before-remove.js   <<END_OF_SED_BEFORE_REMOVE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_BEFORE_REMOVE_HOOK

expect <(cat <<'END_OF_GEN_AFTER_REMOVE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-after-remove\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (6 times) space selects 'remove'
	 
	expect eof
END_OF_GEN_AFTER_REMOVE_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-after-remove.js   <<END_OF_SED_AFTER_REMOVE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_AFTER_REMOVE_HOOK


expect <(cat <<'END_OF_GEN_ERROR_REMOVE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "${SERVICE_NAME}-error-remove\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"
			## downarrow space return selects testservice
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		## downarrow (6 times) space selects 'remove'
	 
	expect eof
END_OF_GEN_ERROR_REMOVE_HOOK
)	

sed --in-place --file=- ./src/hooks/${SERVICE_NAME}-error-remove.js   <<END_OF_SED_ERROR_REMOVE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_ERROR_REMOVE_HOOK






## application-wide hooks


expect <(cat <<'END_OF_GEN_APP_BEFORE_ALL_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-before-all\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"	
		##  space selects 'all'
	 
	expect eof
END_OF_GEN_APP_BEFORE_ALL_HOOK
)	

sed --in-place --file=- ./src/hooks/app-before-all.js   <<END_OF_SED_APP_BEFORE_ALL_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_BEFORE_ALL_HOOK

expect <(cat <<'END_OF_GEN_APP_AFTER_ALL_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-after-all\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"	
		##  space selects 'all'
	 
	expect eof
END_OF_GEN_APP_AFTER_ALL_HOOK
)	

sed --in-place --file=- ./src/hooks/app-after-all.js   <<END_OF_SED_APP_AFTER_ALL_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_AFTER_ALL_HOOK

expect <(cat <<'END_OF_GEN_APP_ERROR_ALL_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-error-all\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (3) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"	
		##  space selects 'all'
	 
	expect eof
END_OF_GEN_APP_ERROR_ALL_HOOK
)	

sed --in-place --file=- ./src/hooks/app-error-all.js   <<END_OF_SED_APP_ERROR_ALL_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_ERROR_ALL_HOOK





expect <(cat <<'END_OF_GEN_APP_BEFORE_FIND_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-before-find\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"	
		##  downarrow (1) space selects 'find'
	 
	expect eof
END_OF_GEN_APP_BEFORE_FIND_HOOK
)	

sed --in-place --file=- ./src/hooks/app-before-find.js   <<END_OF_SED_APP_BEFORE_FIND_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_BEFORE_FIND_HOOK


expect <(cat <<'END_OF_GEN_APP_AFTER_FIND_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-after-find\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"	
		##  space selects 'find'
	 
	expect eof
END_OF_GEN_APP_AFTER_FIND_HOOK
)	

sed --in-place --file=- ./src/hooks/app-after-find.js   <<END_OF_SED_APP_AFTER_FIND_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_AFTER_FIND_HOOK

expect <(cat <<'END_OF_GEN_APP_ERROR_FIND_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-error-find\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (3) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW} \r"	
		##  downarrow (1) space selects 'find'
	 
	expect eof
END_OF_GEN_APP_ERROR_FIND_HOOK
)	

sed --in-place --file=- ./src/hooks/app-error-find.js   <<END_OF_SED_APP_ERROR_FIND_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_ERROR_FIND_HOOK











expect <(cat <<'END_OF_GEN_APP_BEFORE_GET_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-before-get\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow (2) space selects 'get'
	 
	expect eof
END_OF_GEN_APP_BEFORE_GET_HOOK
)	

sed --in-place --file=- ./src/hooks/app-before-get.js   <<END_OF_SED_APP_BEFORE_GET_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_BEFORE_GET_HOOK

expect <(cat <<'END_OF_GEN_APP_AFTER_GET_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-after-get\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW} \r"	
		##  space selects 'get'
	 
	expect eof
END_OF_GEN_APP_AFTER_GET_HOOK
)	

sed --in-place --file=- ./src/hooks/app-after-get.js   <<END_OF_SED_APP_AFTER_GET_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_AFTER_GET_HOOK

expect <(cat <<'END_OF_GEN_APP_ERROR_GET_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-error-get\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (3) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow (2) space selects 'get'
	 
	expect eof
END_OF_GEN_APP_ERROR_GET_HOOK
)	

sed --in-place --file=- ./src/hooks/app-error-get.js   <<END_OF_SED_APP_ERROR_GET_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_ERROR_GET_HOOK










expect <(cat <<'END_OF_GEN_APP_BEFORE_CREATE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-before-create\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow (3) space selects 'create'
	 
	expect eof
END_OF_GEN_APP_BEFORE_CREATE_HOOK
)	

sed --in-place --file=- ./src/hooks/app-before-create.js   <<END_OF_SED_APP_BEFORE_CREATE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_BEFORE_CREATE_HOOK

expect <(cat <<'END_OF_GEN_APP_AFTER_CREATE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-after-create\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		##  space selects 'create'
	 
	expect eof
END_OF_GEN_APP_AFTER_CREATE_HOOK
)	

sed --in-place --file=- ./src/hooks/app-after-create.js   <<END_OF_SED_APP_AFTER_CREATE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_AFTER_CREATE_HOOK

expect <(cat <<'END_OF_GEN_APP_ERROR_CREATE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-error-create\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (3) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow (3) space selects 'create'
	 
	expect eof
END_OF_GEN_APP_ERROR_CREATE_HOOK
)	

sed --in-place --file=- ./src/hooks/app-error-create.js   <<END_OF_SED_APP_ERROR_CREATE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_ERROR_CREATE_HOOK








expect <(cat <<'END_OF_GEN_APP_BEFORE_UPDATE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-before-update\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow (3) space selects 'update'
	 
	expect eof
END_OF_GEN_APP_BEFORE_UPDATE_HOOK
)	

sed --in-place --file=- ./src/hooks/app-before-update.js   <<END_OF_SED_APP_BEFORE_UPDATE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_BEFORE_UPDATE_HOOK

expect <(cat <<'END_OF_GEN_APP_AFTER_UPDATE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-after-update\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow(4) space selects 'update'
	 
	expect eof
END_OF_GEN_APP_AFTER_UPDATE_HOOK
)	

sed --in-place --file=- ./src/hooks/app-after-update.js   <<END_OF_SED_APP_AFTER_UPDATE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_AFTER_UPDATE_HOOK

expect <(cat <<'END_OF_GEN_APP_ERROR_UPDATE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-error-update\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (3) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow (4) space selects 'update'
	 
	expect eof
END_OF_GEN_APP_ERROR_UPDATE_HOOK
)	

sed --in-place --file=- ./src/hooks/app-error-update.js   <<END_OF_SED_APP_ERROR_UPDATE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_ERROR_UPDATE_HOOK







expect <(cat <<'END_OF_GEN_APP_BEFORE_PATCH_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-before-patch\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow (5) space selects 'patch'
	 
	expect eof
END_OF_GEN_APP_BEFORE_PATCH_HOOK
)	

sed --in-place --file=- ./src/hooks/app-before-patch.js   <<END_OF_SED_APP_BEFORE_PATCH_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_BEFORE_PATCH_HOOK

expect <(cat <<'END_OF_GEN_APP_AFTER_PATCH_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-after-patch\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow(5) space selects 'patch'
	 
	expect eof
END_OF_GEN_APP_AFTER_PATCH_HOOK
)	

sed --in-place --file=- ./src/hooks/app-after-patch.js   <<END_OF_SED_APP_AFTER_PATCH_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_AFTER_PATCH_HOOK

expect <(cat <<'END_OF_GEN_APP_ERROR_PATCH_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-error-patch\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (3) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow (5) space selects 'patch'
	 
	expect eof
END_OF_GEN_APP_ERROR_PATCH_HOOK
)	

sed --in-place --file=- ./src/hooks/app-error-patch.js   <<END_OF_SED_APP_ERROR_PATCH_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_ERROR_PATCH_HOOK







expect <(cat <<'END_OF_GEN_APP_BEFORE_REMOVE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-before-remove\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}\r"
			## downarrow return selects 'before'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow (6) space selects 'remove'
	 
	expect eof
END_OF_GEN_APP_BEFORE_REMOVE_HOOK
)	

sed --in-place --file=- ./src/hooks/app-before-remove.js   <<END_OF_SED_APP_BEFORE_REMOVE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_BEFORE_REMOVE_HOOK

expect <(cat <<'END_OF_GEN_APP_AFTER_REMOVE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-after-remove\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}\r"
			## downarrow (2) return selects 'after'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow(5) space selects 'remove'
	 
	expect eof
END_OF_GEN_APP_AFTER_REMOVE_HOOK
)	

sed --in-place --file=- ./src/hooks/app-after-remove.js   <<END_OF_SED_APP_AFTER_REMOVE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_AFTER_REMOVE_HOOK

expect <(cat <<'END_OF_GEN_APP_ERROR_REMOVE_HOOK'
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "app-error-remove\r"
	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${DOWNARROW}${DOWNARROW}\r"
			## downarrow (3) return selects 'error'
	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- " \r"
			##  space return selects 'application0wide'
	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW}${DOWNARROW} \r"	
		##  downarrow (5) space selects 'remove'
	 
	expect eof
END_OF_GEN_APP_ERROR_REMOVE_HOOK
)	

sed --in-place --file=- ./src/hooks/app-error-remove.js   <<END_OF_SED_APP_ERROR_REMOVE_HOOK ;
3i\
\\
const logger = require('winston');\\

/  return async context => {/ a\
    logger.info(__filename);

END_OF_SED_APP_ERROR_REMOVE_HOOK









cat <<END_OF_SCRIPT;
Now run '  cd  ./${FileNameWithoutExtension}/ ; npm start; ' to try it out.
END_OF_SCRIPT
##
##
