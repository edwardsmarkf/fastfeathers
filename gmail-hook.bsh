#! /bin/bash

##	gmail-hook.bsh   -- 2019-02-13

##  Bash-shell script to create the Google-feathers login example with a hook entirely from scratch in
##	order to extract out the email address, google user information, etc.

##  Script is written entirely from https://docs.feathersjs.com/guides/auth/recipe.oauth-basic.html

##  Note:  expect-tcl is used to run the feathers-cli steps.
##  Also, there is a bit of a debate if sudo is required for the feathers installation.  I
##  am using sudo to make the command global in nature.

##	Be sure to run the feathers install gist first!

##  a special shout-out THANK you to feathers slackware Freeline for providing me the code to retrieve the login information.



##      ./config/default.json changes  --  YOU WILL NEED TO CHANGE THESE!
HOST='fastfeathers.website'                                                                      ;
GOOGLE_CLIENT_ID='119068144580-gpeiuXXXXXXXXXXXXXXXXXXXXXXXXk5asgs.apps.googleusercontent.com'   ;
GOOGLE_CLIENT_SECRET='m-RsXXXXXXXXXXJIajwpN'                                                     ;


echo -n  'node version:     '  ;  node     --version   ;       ##      8.15 at the time of this writing
if  [ $? -ne 0 ]; then
        echo 'Node has not yet been installed!';
        exit 1;
fi
echo -n  'npm version:      '  ;  npm      --version   ;       ##      6.7.0 at the time of this writing
if  [ $? -ne 0 ]; then
        echo 'NPM has not yet been installed!';
        exit 1;
fi
echo -n  'feathers version: '  ;  feathers --version   ;       ##      3.9 at the time of this writing
if  [ $? -ne 0 ]; then
        echo 'Feathers has not yet been installed!';
        exit 1;
fi

## prompt for any/all constant-variable changes

echo 'get your authentication information from https://console.developers.google.com/apis/credentials/oauthclient/';

read -p "Enter HOST or blank to use '$HOST': " tmpHost;
if  [ ! -z "$tmpHost" ]; then
        HOST=$tmpHost;
fi;

read -p "Enter GOOGLE_CLIENT_ID or blank to use '$GOOGLE_CLIENT_ID': " tmpGOOGLE_CLIENT_ID;
if  [ ! -z "$tmpGOOGLE_CLIENT_ID" ]; then
        GOOGLE_CLIENT_ID=$tmpGOOGLE_CLIENT_ID;
fi;

read -p "Enter GOOGLE_CLIENT_SECRET or blank to use '$GOOGLE_CLIENT_SECRET': " tmpGOOGLE_CLIENT_SECRET;
if  [ ! -z "$tmpGOOGLE_CLIENT_SECRET" ]; then
        GOOGLE_CLIENT_SECRET=$tmpGOOGLE_CLIENT_SECRET;
fi;


FileNameWithExtension=${0##*/}                       ;
FileNameWithoutExtension=${FileNameWithExtension%.*} ;
TimeStamp=`date "+%Y-%m-%d %r"`                      ;


rm -Rf	./${FileNameWithoutExtension}/ ;  ## just in case one already exists.
mkdir	./${FileNameWithoutExtension}/ &&   cd  ./${FileNameWithoutExtension}/   ;


##     feathers generate  app;   ## taking all the defaults, except for the description
export FileNameWithExtension;
expect <(cat <<'END_OF_GENERATE_APP'
	#	generates an application, taking ALL the defaults

	#	written from https://docs.feathersjs.com/guides/chat/creating.html
	 
	set timeout -1
	
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	set SPACE       \x20;
	set RETURN	\x0d;
	 
	spawn feathers generate app;
	
	expect -re ".*Use typescript.*"
	send -- "${RETURN}"
			## new in Crow  2019-07-01
	 
	expect -re ".*Project name.*"
	send -- "${RETURN}"
			## defaults to the name of the directory
	 
	expect -re ".*Description.*"
	send -- "This app created with expect and $env(FileNameWithExtension)!${RETURN}"
			## optional description
	 
	expect -re ".*What folder should the source files live in?.*"
	send -- "${RETURN}"
			## defaults to 'src'
	 
	expect -re ".*Which package manager are you using \\\(has to be installed globally\\\)?.*"
	send -- "${RETURN}"
			## defaults to 'npm'
	 
	expect -re ".*What type of API are you making.*"
	send -- "${RETURN}"
			## defaults to REST & Realtime via Socket.io

	expect -re ".*Which testing framework do you prefer?.*"		
        send -- "${RETURN}"
	                ## defaults to Mocha + assert

	expect eof

END_OF_GENERATE_APP
)	## end of feathers generate app



##	feathers generate authentication;  ## all defaults
expect <(cat <<'END_OF_GENERATE_AUTH'
	#	generates an authentication for Google

	#	written from	https://docs.feathersjs.com/guides/chat/authentication.html
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	set SPACE       \x20;
	set RETURN	\x0d;

	spawn	feathers generate authentication ;
	 
	expect	-re ".*What authentication providers do you want to use?.*"
	##send	-- "${RETURN}"		
	send	-- " ${DOWNARROW}${DOWNARROW}${SPACE}${RETURN}"	
		## return defaults to Local Storage
		## first space to de-select local, DOWNARROW two times, final space to select Google, and return
	 
	expect	-re ".*What is the name of the user \\\(entity\\\) service.*"
	send	-- "${RETURN}"
		## default answer is 'users'
	 
	expect	-re ".*What kind of service is it?.*"
	send	-- "${RETURN}"
		## default answer is NeDB

	expect	-re ".*What is the database connection string?.*"
	send	-- "${RETURN}"
		## default answer is nedb://../data

	 
	expect eof
END_OF_GENERATE_AUTH
)	## end of feathers generate authentication


##	feathers generate hook;  
expect <(cat <<'END_OF_GENERATE_USER_HOOK'
	#	generates a "BEFORE--CREATE/UPDATE" hook named "user-hook" for the "user" service - for use with Google

	#	written from	https://docs.feathersjs.com/api/authentication/oauth2.html#customizing-the-oauth-response
	 
	set timeout -1
	 
	set UPARROW	\x1B\[A;
	set DOWNARROW	\x1B\[B;
	set SPACE       \x20;
	set RETURN	\x0d;

	spawn	feathers generate hook ;
	 
	expect	-re ".*What is the name of the hook?.*"
	send	-- "user-hook${RETURN}"

	expect	-re "What kind of hook should it be?"
	send	--  "${DOWNARROW}${RETURN}"
			## downarrow return selects 'before'

	expect	-re "What service\\\(s\\\) should this hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${SPACE}${RETURN}"
			## downarrow space return selects 'users'

	expect	-re "What methods should the hook be for \\\(select none to add it yourself\\\)?"
	send	-- "${DOWNARROW}${DOWNARROW}${DOWNARROW}${SPACE}${DOWNARROW}${SPACE}${RETURN}"	
		## downarrow (3) space downarrow(1) space selects both 'create' and 'update'
	 
	expect eof
END_OF_GENERATE_USER_HOOK
)	## end of feathers generate hook


sed --in-place --file=- ./src/hooks/user-hook.js   <<END_OF_SED_USER_HOOK ;
3i\
\\
    \/*  code added by ${FileNameWithExtension} ${TimeStamp} *\/ \\
const logger = require('winston');\\
const _ = require('lodash');\\
    \/* end of code added by ${FileNameWithExtension} ${TimeStamp} *\/ \\

/^  return async context => {$/ a\
  \/*  code added by ${FileNameWithExtension} ${TimeStamp} *\/ \\
  if  (  _.has(context, 'data.google.profile')  ){\\
    if  ( _.has(context.data.google.profile, 'displayName' ) )    {\\
      context.data.displayName = context.data.google.profile.displayName;\\
      logger.info('displayName: ' + context.data.displayName);  \\
    }\\
    if  ( _.has(context.data.google.profile, 'emails' ) ) {\\
      context.data.email = context.data.google.profile.emails.find(email => email.value).value;\\
      logger.info('email:       ' + context.data.email);\\
    }\\
    if  ( _.has(context.data.google.profile, 'name' ) ) {\\
      ['familyName', 'givenName'].forEach( (val) => {\\
        if  ( _.has(context.data.google.profile.name, val )     ) {\\
          context.data[val] = context.data.google.profile.name[val];\\
          logger.info(val + ': ' + context.data[val]);\\
        }\\
      })\\
    }\\
  } // end if has data.google.profile\\
  \/*  end of code added by ${FileNameWithExtension} ${TimeStamp} *\/\\
  
END_OF_SED_USER_HOOK








## modify the default.json file if you are using google (you will have to change these values!)
## values came from   https://console.developers.google.com/apis/api under credidentials
sed --in-place --file=- ./config/default.json  << END_OF_SED_CONFIG_DEFAULT ;
s/"host": "localhost",/"host": "${HOST}",/;
s/your google client id/${GOOGLE_CLIENT_ID}/;
s/your google client secret/${GOOGLE_CLIENT_SECRET}/;
END_OF_SED_CONFIG_DEFAULT


echo " dont forget to change the IP ## in both the ./config/default.json  *AND*  the google-applications page (make sure they match)";


sed --in-place --file=- ./public/index.html << END_OF_INDEX_HTML ;
/<h2 class="center-text">A REST and realtime API layer for modern applications.<\/h2>/ a\
<!-- code added by ${FileNameWithoutExtension} ${TimeStamp} -->\\
<p class="center-text"><br\/>\\
  <a href="/auth/google">Login With Google<\/a>\\
  &nbsp;\\
  <a href="javascript: feathersClient.logout(); Cookies.remove('feathers-jwt'); window.location.reload(true);">Log Out Of Google<\/a>\\
  <br /><br />\\
  Login reply will be in your console (ctrl-shift-I or right-click and select 'view console') and in the feathers console.\\
<\/p>\\
<script type="text/javascript"  src="//unpkg.com/@feathersjs/client@^3.0.0/dist/feathers.js"></script>\\
<script type="text/javascript"  src="//unpkg.com/socket.io-client@1.7.3/dist/socket.io.js"></script>\\
<!-- added for ${FileNameWithExtension} ${TimeStamp} logout -->\\
<script type="text/javascript"  src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>\\
<script type="text/javascript"  src="//cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"></script>\\
<!-- end of added ${FileNameWithExtension} ${TimeStamp} logout -->\\
<script>\\
\\
  // Socket.io is exposed as the \`io\` global.\\
  var socket = io(':3030', {transports: ['websocket']});\\
  // feathers-client is exposed as the \`feathers\` global.\\
  var feathersClient = feathers()\\
	    //.configure(feathers.hooks()) commented out with 3.0\\
    .configure(feathers.socketio(socket))\\
    .configure(feathers.authentication({\\
      cookie: 'feathers-jwt'\\
    }));\\
\\
  var setUserInfo = (async () => {\\
            // a special thanks to feathers-slack "freeline" for graciously providing this code: \\
        var response = await feathersClient.authenticate();\\
        var payload = await feathersClient.passport.verifyJWT(response.accessToken);\\
        var user = await feathersClient.service('users').get(payload.userId);\\
        feathersClient.set('user', user);  // feathersClient.get('user').email to get email address \\
	console.log('you logged in as: ' + feathersClient.get('user').email); // display what is now in user in the console.\\
  })\\
\\
  feathersClient.authenticate()\\
    .then(response => {\\
      console.info('Feathers Client has Authenticated with the JWT access token!');\\
      console.log(response);\\
      setUserInfo();\\
    })\\
    .catch(error => {\\
      console.info("We have not logged in with OAuth, yet.  This means there's no cookie storing the accessToken.  As a result, feathersClient.authenticate() failed.");\\
      console.log(error);\\
    });\\
</script>\\
END_OF_INDEX_HTML

cat <<END_OF_SCRIPT;
Feathers google app should now be built.  Did you change your ./config/default.json values?
Client id in your ./config/default.json values file:  ${GOOGLE_CLIENT_ID}
Client secret in your ./config/default.json values file:  ${GOOGLE_CLIENT_SECRET}
Now run '  cd  ./${FileNameWithoutExtension}/ ; npm start; ' to try it out.
END_OF_SCRIPT
#
#
